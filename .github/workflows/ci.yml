name: CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'images/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'images/**'
  workflow_dispatch:

env:
  GO_VERSION: '1.22'
  COVERAGE_THRESHOLD: 69.5

jobs:
  # Lint and format check
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            echo "Please run 'make fmt' to format your code."
            exit 1
          fi

      - name: Check go mod tidy
        run: |
          go mod tidy
          if [ -n "$(git status --porcelain go.mod go.sum)" ]; then
            echo "go.mod or go.sum is not up to date"
            echo "Please run 'go mod tidy' and commit the changes"
            git diff go.mod go.sum
            exit 1
          fi

  # Unit tests with high parallelism
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [config, core, docker, testutil, workspace]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run unit tests for ${{ matrix.package }}
        env:
          REACTOR_ISOLATION_PREFIX: ci-unit-${{ matrix.package }}-${{ github.run_id }}
        run: |
          echo "Running unit tests for pkg/${{ matrix.package }} with isolation..."
          go test -v -race -coverprofile=coverage-${{ matrix.package }}.out ./pkg/${{ matrix.package }}

      - name: Upload coverage for ${{ matrix.package }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.package }}
          path: coverage-${{ matrix.package }}.out
          retention-days: 1

  # Integration tests (heavier, so separate job)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build reactor binary
        run: make build

      - name: Run integration tests
        env:
          REACTOR_ISOLATION_PREFIX: ci-integration-${{ github.run_id }}
        run: |
          echo "Running integration tests with isolation..."
          go test -v -race -timeout=10m -coverprofile=coverage-integration.out ./pkg/integration
        timeout-minutes: 15

      - name: Upload integration test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-integration
          path: coverage-integration.out
          retention-days: 1

  # Coverage analysis and enforcement
  coverage:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          merge-multiple: true

      - name: Combine coverage reports
        run: |
          echo "mode: atomic" > combined-coverage.out
          for file in coverage-*.out; do
            if [ -f "$file" ]; then
              echo "Processing $file..."
              # Skip the first line (mode declaration) for all files except first
              tail -n +2 "$file" >> combined-coverage.out
            fi
          done

      - name: Generate coverage report
        run: |
          go tool cover -func=combined-coverage.out > coverage-summary.txt
          go tool cover -html=combined-coverage.out -o coverage.html
          
          # Extract total coverage percentage
          COVERAGE=$(go tool cover -func=combined-coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "TOTAL_COVERAGE=${COVERAGE}" >> $GITHUB_ENV
          
          echo "## 📊 Code Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total Coverage: ${COVERAGE}%**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add detailed coverage per package
          echo "### Coverage by Package" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          go tool cover -func=combined-coverage.out | grep -v total >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Check coverage threshold
        run: |
          echo "Current coverage: ${TOTAL_COVERAGE}%"
          echo "Required threshold: ${{ env.COVERAGE_THRESHOLD }}%"
          
          # Use bc for floating point comparison
          if [ $(echo "${TOTAL_COVERAGE} < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) -eq 1 ]; then
            echo "❌ Coverage ${TOTAL_COVERAGE}% is below threshold ${{ env.COVERAGE_THRESHOLD }}%"
            echo ""
            echo "## ❌ Coverage Check Failed" >> $GITHUB_STEP_SUMMARY
            echo "Current coverage (**${TOTAL_COVERAGE}%**) is below the required threshold (**${{ env.COVERAGE_THRESHOLD }}%**)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please add tests to improve coverage before merging." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ Coverage ${TOTAL_COVERAGE}% meets threshold ${{ env.COVERAGE_THRESHOLD }}%"
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## ✅ Coverage Check Passed" >> $GITHUB_STEP_SUMMARY
            echo "Coverage (**${TOTAL_COVERAGE}%**) meets the required threshold (**${{ env.COVERAGE_THRESHOLD }}%**) ✨" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            combined-coverage.out
            coverage.html
            coverage-summary.txt
          retention-days: 30

      - name: Upload coverage to Codecov (if available)
        if: env.CODECOV_TOKEN != ''
        uses: codecov/codecov-action@v4
        with:
          file: combined-coverage.out
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # Build verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin]
        arch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build for ${{ matrix.os }}/${{ matrix.arch }}
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
        run: |
          echo "Building reactor for ${{ matrix.os }}/${{ matrix.arch }}..."
          make build
          
          # Verify binary was created and is executable
          if [ ! -f "./build/reactor" ]; then
            echo "❌ Binary not found!"
            exit 1
          fi
          
          # Check binary properties
          file ./build/reactor
          ls -la ./build/reactor
          
          echo "✅ Build successful for ${{ matrix.os }}/${{ matrix.arch }}"

  # Final status check
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, coverage, build]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          # Check if any job failed
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.unit-tests.result }}" != "success" ] || \
             [ "${{ needs.integration-tests.result }}" != "success" ] || \
             [ "${{ needs.coverage.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "❌ One or more CI jobs failed"
            echo ""
            echo "## ❌ CI Status: Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| Lint | ${{ needs.lint.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Coverage | ${{ needs.coverage.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Build | ${{ needs.build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ All CI jobs passed successfully!"
            echo ""
            echo "## ✅ CI Status: Success" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All checks passed! 🎉" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| Lint | ✅ |" >> $GITHUB_STEP_SUMMARY
            echo "| Unit Tests | ✅ |" >> $GITHUB_STEP_SUMMARY
            echo "| Integration Tests | ✅ |" >> $GITHUB_STEP_SUMMARY  
            echo "| Coverage | ✅ |" >> $GITHUB_STEP_SUMMARY
            echo "| Build | ✅ |" >> $GITHUB_STEP_SUMMARY
          fi