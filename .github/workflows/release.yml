name: Release Binaries

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Build and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Get version info
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          GIT_COMMIT=$(git rev-parse --short HEAD)
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "git_commit=$GIT_COMMIT" >> $GITHUB_OUTPUT
          echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Build binaries
        env:
          VERSION: ${{ steps.version.outputs.version }}
          GIT_COMMIT: ${{ steps.version.outputs.git_commit }}
          BUILD_DATE: ${{ steps.version.outputs.build_date }}
          LDFLAGS: "-X main.Version=${{ steps.version.outputs.version }} -X main.GitCommit=${{ steps.version.outputs.git_commit }} -X main.BuildDate=${{ steps.version.outputs.build_date }}"
        run: |
          echo "Building reactor binaries for all platforms..."
          mkdir -p build

          echo "Building for linux/amd64..."
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "$LDFLAGS" -o build/reactor-linux-amd64 ./cmd/reactor

          echo "Building for linux/arm64..."
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -ldflags "$LDFLAGS" -o build/reactor-linux-arm64 ./cmd/reactor

          echo "Building for darwin/amd64..."
          GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "$LDFLAGS" -o build/reactor-darwin-amd64 ./cmd/reactor

          echo "Building for darwin/arm64..."
          GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -ldflags "$LDFLAGS" -o build/reactor-darwin-arm64 ./cmd/reactor

          echo "Build complete. Verifying binaries:"
          ls -la build/
          file build/reactor-*

      - name: Generate Checksums
        run: |
          echo "Generating SHA256 checksums..."
          cd build
          sha256sum reactor-* > SHA256SUMS.txt
          echo "Generated checksums:"
          cat SHA256SUMS.txt

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.version.outputs.version }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          generate_release_notes: true
          files: |
            build/reactor-linux-amd64
            build/reactor-linux-arm64
            build/reactor-darwin-amd64
            build/reactor-darwin-arm64
            build/SHA256SUMS.txt
          body: |
            ## Reactor ${{ steps.version.outputs.version }}

            ### Download

            Choose the appropriate binary for your platform:

            - **Linux AMD64**: `reactor-linux-amd64`
            - **Linux ARM64**: `reactor-linux-arm64` 
            - **macOS Intel**: `reactor-darwin-amd64`
            - **macOS Apple Silicon**: `reactor-darwin-arm64`

            ### Installation

            ```bash
            # Download the appropriate binary (replace with your platform)
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/reactor-linux-amd64 -o reactor

            # Make it executable
            chmod +x reactor

            # Move to PATH (optional)
            sudo mv reactor /usr/local/bin/
            ```

            ### Verification

            Verify the download with the provided checksums:

            ```bash
            # Download checksums
            curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/SHA256SUMS.txt -o SHA256SUMS.txt

            # Verify (replace with your platform)
            sha256sum -c SHA256SUMS.txt --ignore-missing
            ```

            ### Build Info

            - **Version**: ${{ steps.version.outputs.version }}
            - **Git Commit**: ${{ steps.version.outputs.git_commit }}
            - **Build Date**: ${{ steps.version.outputs.build_date }}
            - **Go Version**: 1.22

      - name: Generate build summary
        if: always()
        run: |
          echo "# ðŸš€ Reactor Release Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Release Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Git Commit**: ${{ steps.version.outputs.git_commit }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Date**: ${{ steps.version.outputs.build_date }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Built Binaries" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… \`reactor-linux-amd64\`" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… \`reactor-linux-arm64\`" >> $GITHUB_STEP_SUMMARY  
          echo "- âœ… \`reactor-darwin-amd64\`" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… \`reactor-darwin-arm64\`" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… \`SHA256SUMS.txt\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Release Assets" >> $GITHUB_STEP_SUMMARY
          echo "All binaries and checksums have been uploaded to the GitHub Release:" >> $GITHUB_STEP_SUMMARY
          echo "https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY